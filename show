#!/usr/bin/env python3
from collections import defaultdict
from dataclasses import dataclass
from typing import NewType

USAGE = """
Usage:
$THIS_SCRIPT $OUTPUT_FILE $THE_FACTS_FILE 

Where:
- $THE_FACTS_FILE contains output from Alloy Analyzer text view
- $OUTPUT_FILE is where to write the generated Hack example
"""
import sys


"""
Sometimes it can be quite a joy to write unreadable, highly-dynamic code.
"""



def parse_facts(text):
    """Doesn't know about domain-specific facts, completely neutral"""
    facts = defaultdict(dict)
    for line in text.split("\n"):
        if not line.startswith("this/"):
            continue
        lhs, raw_rhs = line[len("this/") :].split("=")
        rhs = raw_rhs[1:-1].split(", ")  # strip surrounding braces and parse list
        if "<:" not in lhs:
            sig = lhs
            for name in rhs:
                if name:
                    facts[sig][name] = {}
        else:
            sig, prop = lhs.split("<:")
            for mapping in rhs:
                if mapping:
                    name, val = mapping.split("->")
                    if prop not in facts[sig][name]:
                        facts[sig][name][prop] = []
                    facts[sig][name][prop].append(val)

    return facts


Id = NewType("Id", str)


@dataclass(frozen=True)
class Chunk:
    """Enables us sort contents in dependency order before printing"""

    contents: list[str]
    comes_after_ids: set[Id]

    @staticmethod
    def chunks_to_text(chunks: dict[Id, "Chunk"]) -> str:
        """topo-sort and put lines between multi-line chunks"""
        taken_ids = set()
        lines = []
        while True:
            has_taken = False
            for chunk_id, chunk in chunks.items():
                if chunk_id in taken_ids:
                    continue
                if chunk.comes_after_ids.issubset(taken_ids):
                    taken_ids.add(chunk_id)
                    lines.extend(chunk.contents)
                    has_taken = True
            if not has_taken:
                break

        return "\n".join(lines)


# domain-specific stuff
HEADER = """<?hh
<<file: __EnableUnstableFeatures('typed_local_variables')>>

"""


def var_id_to_name(var_id: Id) -> str:
    """Var$0 becomes $v0"""
    return "$v" + var_id.split("$")[1]


def class_id_to_name(class_id: Id) -> str:
    """AbstractClass$0 becomes AbstractClass0"""
    return class_id.replace("$", "")

def method_name_id_to_name(method_name_id: Id) -> str:
    """MethodName$0 becomes m0"""
    return method_name_id.replace("MethodName$", "m")


def receiver_to_name(receiver_id: Id) -> str:
    if receiver_id == "StaticKeyword$0":
        return "static"
    else:
        assert receiver_id.startswith("Var$")
        return var_id_to_name(receiver_id)


def facts_to_code(facts):
    chunks: dict[Id, Chunk] = {}

    def method_name_is__construct(method_name_id: Id) -> bool:
        return method_name_id in facts['__Construct']

    def method_is_called_at_least_once(method_id: Id) -> bool:
        for call in facts['Call'].values():
            if 'resolves_to' in call:
                if method_id in call['resolves_to']:
                    return True
        return False

    def var_to_chunk(var_id) -> Chunk:
        var = facts["Var"][var_id]
        var_ty_id = var["var_ty"][0]
        names_class = facts["Type"][var_ty_id]["names_class"][0]
        names_class_name = class_id_to_name(names_class)
        if var_ty_id in facts["ClassName"]:
            ty_str = f"classname<{names_class_name}>"
        elif var_ty_id in facts["ConcreteClassName"]:
            ty_str = f"concrete_classname<{names_class_name}>"
        else:
            raise Exception(f"could not find type {var_ty_id}")
        points_to = var["var_points_to"][0]
        comes_after_ids = set([points_to])
        if points_to in facts["Var"]:
            points_to_name = var_id_to_name(points_to)
        else:
            assert(points_to) in facts['Class']
            points_to_name = class_id_to_name(points_to) + '::class'
        var_name = var_id_to_name(var_id)
        contents = [f"  let {var_name} : {ty_str} = {points_to_name};"]
        return Chunk(contents=contents, comes_after_ids=comes_after_ids)

    def call_to_chunk(call_id, whitespace) -> Chunk:
        call = facts["Call"][call_id]
        method_name_id = call["call_method_name"][0]
        resolves_to = "resolves to " + ", ".join(call["resolves_to"])
        receiver: Id = call["receiver"][0]
        receiver_name = receiver_to_name(receiver)
        if receiver == "StaticKeyword$0":
            comes_after_ids: set[Id] = set([])
        else:
            comes_after_ids: set[Id] = set([receiver])
        if method_name_is__construct(method_name_id):
            call_expr = f'new {receiver_name}()'
        else:
            method_name = method_name_id_to_name(method_name_id)
            call_expr = f"{receiver_name}::{method_name}()"
        contents = [
            f"{whitespace}{call_expr};    // {call_id} {resolves_to}"
        ]
        return Chunk(contents=contents, comes_after_ids=comes_after_ids)

    def class_to_chunk(class_id) -> Chunk:
        class_ = facts["Class"][class_id]
        contents = []
        comes_after_ids = set([])
        extends_str = ""
        parent_methods = []
        if "parent" in class_:
            parent_id = class_["parent"][0]
            parent = facts["Class"][parent_id]
            if "methods" in parent:
                parent_methods = parent["methods"]
            extends_str = f" extends {class_id_to_name(parent_id)}"
            comes_after_ids = set([parent_id])
        if class_id in facts["AbstractClass"]:
            abstract_str = "abstract "
        else:
            abstract_str = ""
        class_name = class_id_to_name(class_id)
        contents.append(f"{abstract_str}class {class_name}{extends_str} {{")
        if "methods" not in class_:
            contents[-1] = contents[-1] + "}"
        if "methods" in class_:
            for method_id in class_["methods"]:
                if method_id in parent_methods:
                    continue
                method = facts["Method"][method_id]
                method_name_id = method["method_name"][0]
                if method_name_is__construct(method_name_id):
                    is_constructor = True
                    modifiers = []
                    method_name = '__construct'
                    if not method_is_called_at_least_once(method_id):
                        # Showing all constructors would be noisy because
                        # all concrete classes have constructors
                        continue
                else:
                    is_constructor = False
                    modifiers = ['static']
                    method_name = method_name_id_to_name(method_name_id)
                contents.append("")
                if method_id in facts["AbstractMethod"]:
                    modifiers.append('abstract')
                    contents.append(
                        f"  public {' '.join(modifiers)} function {method_name}(): void /* {method_id}*/;"
                    )
                if method_id in facts["ConcreteMethod"]:
                    concrete_method = facts["ConcreteMethod"][method_id]
                    attr = "concrete_class_attribute"
                    if attr in concrete_method and not is_constructor:
                        if len(concrete_method[attr]):
                            contents.append("  <<__ConcreteClass>>")
                    contents.append(
                        f"  public {' '.join(modifiers)} function {method_name}(): void /* {method_id}*/ {{"
                    )
                    if "calls" not in concrete_method:
                        contents[-1] = contents[-1] + "}"
                    else:
                        for call_id in concrete_method["calls"]:
                            if call_uses_static(call_id):
                                for other_contents in call_to_chunk(
                                    call_id, "   "
                                ).contents:
                                    contents.append(other_contents)
                        contents.append("  }")
            contents.append("}")
        contents.append("")
        return Chunk(contents=contents, comes_after_ids=comes_after_ids)

    def call_uses_static(call_id):
        call = facts["Call"][call_id]
        receiver = call["receiver"][0]
        return receiver == "StaticKeyword$0"

    for class_id in facts["Class"]:
        chunks[class_id] = class_to_chunk(class_id)

    chunks[Id("start of main function")] = Chunk(
        contents=["<<__EntryPoint>>", "function main(): void {"],
        comes_after_ids=set(chunks.keys()),
    )
    for var_id in facts["Var"]:
        chunks[var_id] = var_to_chunk(var_id)

    for call_id in facts["Call"]:
        if not call_uses_static(call_id):
            chunks[call_id] = call_to_chunk(call_id, "  ")

    chunks[Id("end of main function")] = Chunk(
        contents=["", "}"], comes_after_ids=set(chunks.keys())
    )

    return HEADER + Chunk.chunks_to_text(chunks)


def facts_to_str(facts_raw_text) -> str:
    facts = parse_facts(facts_raw_text)
    return facts_to_code(facts) + '\n'


def main():
    if len(sys.argv) < 3:
        print(USAGE)
        exit(1)

    facts_raw_text = ""
    with open(sys.argv[2], 'r') as f:
        facts_raw_text = f.read()
    with open(sys.argv[1], 'w') as f:
        f.write(facts_to_str(facts_raw_text))


if __name__ == "__main__":
    main()
